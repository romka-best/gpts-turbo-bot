import logging

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import BotCommand, BotCommandScopeChat

from bot.config import config

commands_en = [
    BotCommand(
        command='start',
        description='üëã About this bot',
    ),
    BotCommand(
        command='help',
        description='üõü Detailed information about commands',
    ),
    BotCommand(
        command='mode',
        description='ü§ñ Choose AI model',
    ),
    BotCommand(
        command='buy',
        description='üíé Buy a subscription or individual packages',
    ),
    BotCommand(
        command='profile',
        description='üë§ Profile',
    ),
    BotCommand(
        command='settings',
        description='üîß Customize AI model for yourself',
    ),
    BotCommand(
        command='language',
        description='üåç Change language',
    ),
    BotCommand(
        command='info',
        description='‚ÑπÔ∏è Get info about AI models',
    ),
    BotCommand(
        command='chatgpt',
        description='üí• Switch to ChatGPT model',
    ),
    BotCommand(
        command='claude',
        description='üöÄ Switch to Claude model',
    ),
    BotCommand(
        command='gemini',
        description='‚ú® Switch to Gemini model',
    ),
    BotCommand(
        command='dalle',
        description='üë®‚Äçüé® Switch to DALL-E model',
    ),
    BotCommand(
        command='midjourney',
        description='üé® Switch to Midjourney model',
    ),
    BotCommand(
        command='stable_diffusion',
        description='üéÜ Switch to Stable Diffusion model',
    ),
    BotCommand(
        command='face_swap',
        description='üì∑Ô∏è Switch to FaceSwap model',
    ),
    BotCommand(
        command='photoshop',
        description='ü™Ñ Switch to Photoshop AI model',
    ),
    BotCommand(
        command='music_gen',
        description='üé∫ Switch to MusicGen model',
    ),
    BotCommand(
        command='suno',
        description='üé∏ Switch to Suno model',
    ),
    BotCommand(
        command='bonus',
        description='üéÅ Bonus balance',
    ),
    BotCommand(
        command='promo_code',
        description='üîë Type promo code to get magic',
    ),
    BotCommand(
        command='feedback',
        description='üì° Give a feedback',
    ),
    BotCommand(
        command='terms',
        description='üìÑ Terms of Service',
    ),
]

commands_ru = [
    BotCommand(
        command='start',
        description='üëã –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç',
    ),
    BotCommand(
        command='help',
        description='üõü –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –∫–æ–º–∞–Ω–¥—ã',
    ),
    BotCommand(
        command='mode',
        description='ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò',
    ),
    BotCommand(
        command='buy',
        description='üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã',
    ),
    BotCommand(
        command='profile',
        description='üë§ –ü—Ä–æ—Ñ–∏–ª—å',
    ),
    BotCommand(
        command='settings',
        description='üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –ò–ò –ø–æ–¥ —Å–µ–±—è',
    ),
    BotCommand(
        command='language',
        description='üåç –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
    ),
    BotCommand(
        command='info',
        description='‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –º–æ–¥–µ–ª–∏ –ò–ò',
    ),
    BotCommand(
        command='chatgpt',
        description='üí• –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ ChatGPT –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='claude',
        description='üöÄ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Claude –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='gemini',
        description='‚ú® –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Gemini –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='dalle',
        description='üë®‚Äçüé® –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ DALL-E –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='midjourney',
        description='üé® –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Midjourney –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='stable_diffusion',
        description='üéÜ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Stable Diffusion –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='face_swap',
        description='üì∑Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ FaceSwap –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='photoshop',
        description='ü™Ñ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Photoshop AI –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='music_gen',
        description='üé∫ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ MusicGen –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='suno',
        description='üé∏ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Suno –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='bonus',
        description='üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å',
    ),
    BotCommand(
        command='promo_code',
        description='üîë –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–≥–∏–∏',
    ),
    BotCommand(
        command='feedback',
        description='üì° –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å',
    ),
    BotCommand(
        command='terms',
        description='üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
    ),
]

commands_admin = commands_ru + [
    BotCommand(command='admin', description='üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞'),
]


async def set_commands(bot: Bot):
    await bot.set_my_commands(commands=commands_en)
    await bot.set_my_commands(commands=commands_ru, language_code='ru')

    for chat_id in config.ADMIN_IDS:
        try:
            await bot.set_my_commands(commands=commands_admin, scope=BotCommandScopeChat(chat_id=chat_id))
        except TelegramBadRequest as error:
            if error.message.startswith('Bad Request: chat not found'):
                logging.warning(f'{error.message}: {chat_id}')
            else:
                raise error


async def set_commands_for_user(bot: Bot, chat_id: str, language='en'):
    try:
        if language == 'ru':
            await bot.set_my_commands(commands=commands_ru, scope=BotCommandScopeChat(chat_id=chat_id))
        else:
            await bot.set_my_commands(commands=commands_en, scope=BotCommandScopeChat(chat_id=chat_id))
    except TelegramBadRequest as error:
        if error.message.startswith('Bad Request: chat not found'):
            logging.warning(f'{error.message}: {chat_id}')
        else:
            raise error
