import logging

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import BotCommand, BotCommandScopeChat

from bot.config import config
from bot.locales.types import LanguageCode

commands_en = [
    BotCommand(
        command='start',
        description='üëã About this bot',
    ),
    BotCommand(
        command='model',
        description='ü§ñ Select AI model',
    ),
    BotCommand(
        command='profile',
        description='üë§ Profile',
    ),
    BotCommand(
        command='buy',
        description='üíé Buy a subscription or packages',
    ),
    BotCommand(
        command='text',
        description='üî§ Generate Text with: ChatGPT, Claude, Gemini, Grok, Perplexity',
    ),
    BotCommand(
        command='summary',
        description='üìù Generate Summary in: YouTube, Video',
    ),
    BotCommand(
        command='image',
        description='üñº Generate Images with: DALL-E, Midjourney, Stable Diffusion, Flux, Luma Photon, FaceSwap, Photoshop AI',
    ),
    BotCommand(
        command='music',
        description='üéµ Generate Music with: MusicGen, Suno',
    ),
    BotCommand(
        command='video',
        description='üìπ Generate Videos with: Kling, Runway, Luma Ray',
    ),
    BotCommand(
        command='info',
        description='‚ÑπÔ∏è Info about AI models',
    ),
    BotCommand(
        command='catalog',
        description='üìÇ Catalog with prompts and digital employees',
    ),
    BotCommand(
        command='settings',
        description='üîß Customize AI model for yourself',
    ),
    BotCommand(
        command='language',
        description='üåç Select language',
    ),
    BotCommand(
        command='bonus',
        description='üéÅ Bonus balance',
    ),
    BotCommand(
        command='help',
        description='üõü Detailed information about commands',
    ),
]

commands_ru = [
    BotCommand(
        command='start',
        description='üëã –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç',
    ),
    BotCommand(
        command='model',
        description='ü§ñ –í—ã–±—Ä–∞—Ç—å AI –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='profile',
        description='üë§ –ü—Ä–æ—Ñ–∏–ª—å',
    ),
    BotCommand(
        command='buy',
        description='üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø–∞–∫–µ—Ç—ã',
    ),
    BotCommand(
        command='text',
        description='üî§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å: ChatGPT, Claude, Gemini, Grok, Perplexity',
    ),
    BotCommand(
        command='summary',
        description='üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ –≤: YouTube, –í–∏–¥–µ–æ',
    ),
    BotCommand(
        command='image',
        description='üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å: DALL-E, Midjourney, Stable Diffusion, Flux, Luma Photon, FaceSwap, Photoshop AI',
    ),
    BotCommand(
        command='music',
        description='üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ —Å: MusicGen, Suno',
    ),
    BotCommand(
        command='video',
        description='üìπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å: Kling, Runway, Luma Ray',
    ),
    BotCommand(
        command='info',
        description='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –º–æ–¥–µ–ª–∏ –ò–ò',
    ),
    BotCommand(
        command='catalog',
        description='üìÇ –ö–∞—Ç–∞–ª–æ–≥ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏',
    ),
    BotCommand(
        command='settings',
        description='üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ–¥ —Å–µ–±—è',
    ),
    BotCommand(
        command='language',
        description='üåç –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫',
    ),
    BotCommand(
        command='bonus',
        description='üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å',
    ),
    BotCommand(
        command='help',
        description='üõü –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –∫–æ–º–∞–Ω–¥—ã',
    ),
]

commands_es = [
    BotCommand(
        command='start',
        description='üëã Qu√© puede hacer este bot',
    ),
    BotCommand(
        command='model',
        description='ü§ñ Seleccionar modelo IA',
    ),
    BotCommand(
        command='profile',
        description='üë§ Perfil',
    ),
    BotCommand(
        command='buy',
        description='üíé Comprar suscripci√≥n o paquetes',
    ),
    BotCommand(
        command='text',
        description='üî§ Generaci√≥n de texto con: ChatGPT, Claude, Gemini, Grok, Perplexity',
    ),
    BotCommand(
        command='summary',
        description='üìù Generaci√≥n de res√∫menes en: YouTube, Video',
    ),
    BotCommand(
        command='image',
        description='üñº Generaci√≥n de im√°genes con: DALL-E, Midjourney, Stable Diffusion, Flux, Luma Photon, FaceSwap, Photoshop IA',
    ),
    BotCommand(
        command='music',
        description='üéµ Generaci√≥n de m√∫sica con: MusicGen, Suno',
    ),
    BotCommand(
        command='video',
        description='üìπ Generaci√≥n de video con: Kling, Runway, Luma Ray',
    ),
    BotCommand(
        command='info',
        description='‚ÑπÔ∏è Informaci√≥n sobre modelos AI',
    ),
    BotCommand(
        command='catalog',
        description='üìÇ Cat√°logo de prompts y empleados digitales',
    ),
    BotCommand(
        command='settings',
        description='üîß Configurar el modelo a tu medida',
    ),
    BotCommand(
        command='language',
        description='üåç Cambiar idioma',
    ),
    BotCommand(
        command='bonus',
        description='üéÅ Balance de bonificaci√≥n',
    ),
    BotCommand(
        command='help',
        description='üõü Informaci√≥n detallada sobre comandos',
    ),
]

commands_hi = [
    BotCommand(
        command='start',
        description='üëã ‡§á‡§∏ ‡§¨‡•â‡§ü ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ‡§è‡§Å ‡§ú‡§æ‡§®‡•á‡§Ç',
    ),
    BotCommand(
        command='model',
        description='ü§ñ AI ‡§Æ‡•â‡§°‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç',
    ),
    BotCommand(
        command='profile',
        description='üë§ ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤',
    ),
    BotCommand(
        command='buy',
        description='üíé ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§§‡§æ ‡§Ø‡§æ ‡§™‡•à‡§ï‡•á‡§ú ‡§ñ‡§∞‡•Ä‡§¶‡•á‡§Ç',
    ),
    BotCommand(
        command='text',
        description='üî§ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ú‡§®‡§∞‡•á‡§∂‡§®: ChatGPT, Claude, Gemini, Grok, Perplexity ‡§∏‡•á',
    ),
    BotCommand(
        command='summary',
        description='üìù ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂ ‡§ú‡§®‡§∞‡•á‡§∂‡§®: YouTube, ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§∏‡•á',
    ),
    BotCommand(
        command='image',
        description='üñº ‡§õ‡§µ‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£: DALL-E, Midjourney, Stable Diffusion, Flux, Luma Photon, FaceSwap, Photoshop AI ‡§∏‡•á',
    ),
    BotCommand(
        command='music',
        description='üéµ ‡§∏‡§Ç‡§ó‡•Ä‡§§ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£: MusicGen, Suno ‡§∏‡•á',
    ),
    BotCommand(
        command='video',
        description='üìπ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£: Kling, Runway, Luma Ray ‡§∏‡•á',
    ),
    BotCommand(
        command='info',
        description='‚ÑπÔ∏è AI ‡§Æ‡•â‡§°‡§≤ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä',
    ),
    BotCommand(
        command='catalog',
        description='üìÇ ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§î‡§∞ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡•Ä',
    ),
    BotCommand(
        command='settings',
        description='üîß ‡§Ö‡§™‡§®‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§‡•ã‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Æ‡•â‡§°‡§≤ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç',
    ),
    BotCommand(
        command='language',
        description='üåç ‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç',
    ),
    BotCommand(
        command='bonus',
        description='üéÅ ‡§¨‡•ã‡§®‡§∏ ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏',
    ),
    BotCommand(
        command='help',
        description='üõü ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä',
    ),
]

commands_admin = commands_ru + [
    BotCommand(command='admin', description='üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞'),
]


async def set_commands(bot: Bot):
    await bot.set_my_commands(commands=commands_en)
    await bot.set_my_commands(commands=commands_ru, language_code=LanguageCode.RU)
    await bot.set_my_commands(commands=commands_es, language_code=LanguageCode.ES)
    await bot.set_my_commands(commands=commands_hi, language_code=LanguageCode.HI)

    for chat_id in config.ADMIN_IDS:
        try:
            await bot.set_my_commands(commands=commands_admin, scope=BotCommandScopeChat(chat_id=chat_id))
        except TelegramBadRequest as error:
            if error.message.startswith('Bad Request: chat not found'):
                logging.warning(f'{error.message}: {chat_id}')
            else:
                raise error


async def set_commands_for_user(bot: Bot, chat_id: str, language=LanguageCode):
    try:
        if language == LanguageCode.RU:
            await bot.set_my_commands(commands=commands_ru, scope=BotCommandScopeChat(chat_id=chat_id))
        elif language == LanguageCode.ES:
            await bot.set_my_commands(commands=commands_es, scope=BotCommandScopeChat(chat_id=chat_id))
        elif language == LanguageCode.HI:
            await bot.set_my_commands(commands=commands_hi, scope=BotCommandScopeChat(chat_id=chat_id))
        else:
            await bot.set_my_commands(commands=commands_en, scope=BotCommandScopeChat(chat_id=chat_id))
    except TelegramBadRequest as error:
        if error.message.startswith('Bad Request: chat not found'):
            logging.warning(f'{error.message}: {chat_id}')
        else:
            raise error
