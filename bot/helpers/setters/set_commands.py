import logging

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import BotCommand, BotCommandScopeChat

from bot.config import config
from bot.locales.types import LanguageCode

commands_en = [
    BotCommand(
        command='start',
        description='üëã About this bot',
    ),
    BotCommand(
        command='model',
        description='ü§ñ Select AI model',
    ),
    BotCommand(
        command='profile',
        description='üë§ Profile',
    ),
    BotCommand(
        command='buy',
        description='üíé Buy a subscription or packages',
    ),
    BotCommand(
        command='text',
        description='üî§ Generate Text with: ChatGPT, Claude, Gemini',
    ),
    BotCommand(
        command='summary',
        description='üìù Generate Summary in: YouTube',
    ),
    BotCommand(
        command='image',
        description='üñº Generate Images with: DALL-E, Midjourney, Stable Diffusion, Flux, FaceSwap, Photoshop AI',
    ),
    BotCommand(
        command='music',
        description='üéµ Generate Music with: MusicGen, Suno',
    ),
    BotCommand(
        command='video',
        description='üìπ Generate Videos with: Runway',
    ),
    BotCommand(
        command='info',
        description='‚ÑπÔ∏è Info about AI models',
    ),
    BotCommand(
        command='catalog',
        description='üìÇ Catalog with prompts and digital employees',
    ),
    BotCommand(
        command='settings',
        description='üîß Customize AI model for yourself',
    ),
    BotCommand(
        command='language',
        description='üåç Select language',
    ),
    BotCommand(
        command='bonus',
        description='üéÅ Bonus balance',
    ),
    BotCommand(
        command='help',
        description='üõü Detailed information about commands',
    ),
]

commands_ru = [
    BotCommand(
        command='start',
        description='üëã –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç',
    ),
    BotCommand(
        command='model',
        description='ü§ñ –í—ã–±—Ä–∞—Ç—å AI –º–æ–¥–µ–ª—å',
    ),
    BotCommand(
        command='profile',
        description='üë§ –ü—Ä–æ—Ñ–∏–ª—å',
    ),
    BotCommand(
        command='buy',
        description='üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø–∞–∫–µ—Ç—ã',
    ),
    BotCommand(
        command='text',
        description='üî§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å: ChatGPT, Claude, Gemini',
    ),
    BotCommand(
        command='summary',
        description='üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ –≤: YouTube',
    ),
    BotCommand(
        command='image',
        description='üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å: DALL-E, Midjourney, Stable Diffusion, Flux, FaceSwap, Photoshop AI',
    ),
    BotCommand(
        command='music',
        description='üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ —Å: MusicGen, Suno',
    ),
    BotCommand(
        command='video',
        description='üìπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å: Runway',
    ),
    BotCommand(
        command='info',
        description='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –º–æ–¥–µ–ª–∏ –ò–ò',
    ),
    BotCommand(
        command='catalog',
        description='üìÇ –ö–∞—Ç–∞–ª–æ–≥ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏',
    ),
    BotCommand(
        command='settings',
        description='üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ–¥ —Å–µ–±—è',
    ),
    BotCommand(
        command='language',
        description='üåç –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫',
    ),
    BotCommand(
        command='bonus',
        description='üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å',
    ),
    BotCommand(
        command='help',
        description='üõü –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –∫–æ–º–∞–Ω–¥—ã',
    ),
]

commands_admin = commands_ru + [
    BotCommand(command='admin', description='üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞'),
]


async def set_commands(bot: Bot):
    await bot.set_my_commands(commands=commands_en)
    await bot.set_my_commands(commands=commands_ru, language_code=LanguageCode.RU)

    for chat_id in config.ADMIN_IDS:
        try:
            await bot.set_my_commands(commands=commands_admin, scope=BotCommandScopeChat(chat_id=chat_id))
        except TelegramBadRequest as error:
            if error.message.startswith('Bad Request: chat not found'):
                logging.warning(f'{error.message}: {chat_id}')
            else:
                raise error


async def set_commands_for_user(bot: Bot, chat_id: str, language=LanguageCode):
    try:
        if language == LanguageCode.RU:
            await bot.set_my_commands(commands=commands_ru, scope=BotCommandScopeChat(chat_id=chat_id))
        else:
            await bot.set_my_commands(commands=commands_en, scope=BotCommandScopeChat(chat_id=chat_id))
    except TelegramBadRequest as error:
        if error.message.startswith('Bad Request: chat not found'):
            logging.warning(f'{error.message}: {chat_id}')
        else:
            raise error
